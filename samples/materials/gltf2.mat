material {
    name : Lit,
    requires : [
        uv0
    ],
    shadingModel : lit,
    parameters : [
        {
            type : sampler2d,
            name : baseColorMap
        },
        {
            type : float4,
            name : baseColorFactor
        },
        {
            type : sampler2d,
            name : metallicRoughnessMap
        },
        {
            type : float,
            name : metallicFactor
        },
        {
            type : float,
            name : roughnessFactor
        },
        {
            type : sampler2d,
            name : normalMap
        },
        {
            type : float,
            name : normalScale
        },
        {
            type : sampler2d,
            name : aoMap
        },
        {
            type : float,
            name : aoStrength
        },
        {
            type : sampler2d,
            name : emissiveMap
        },
        {
            type : float3,
            name : emissiveFactor
        }
    ],
}

fragment {
//    void material(inout MaterialInputs material) {
//        material.normal = texture(materialParams_normalMap, getUV0()).xyz * 2.0 - 1.0;
//        prepareMaterial(material);
//        material.baseColor = texture(materialParams_baseColorMap, getUV0());
//        material.roughness = texture(materialParams_metallicRoughnessMap, getUV0()).g;
//        material.metallic = texture(materialParams_metallicRoughnessMap, getUV0()).b;
//        material.ambientOcclusion = texture(materialParams_aoMap, getUV0()).r;
//    }

void material(inout MaterialInputs material) {
    material.normal = texture(materialParams_normalMap, getUV0()).xyz * 2.0 - 1.0;
    prepareMaterial(material);
//    material.baseColor.rgb = float3(1.0, 0.75, 0.94);
//    material.metallic = 0.0;
//    material.roughness = 1.0;
//    material.ambientOcclusion = 1.0;
    material.baseColor = texture(materialParams_baseColorMap, getUV0());
    material.baseColor.r *= materialParams.baseColorFactor[0];
    material.baseColor.g *= materialParams.baseColorFactor[1];
    material.baseColor.b *= materialParams.baseColorFactor[2];
    material.roughness = materialParams.roughnessFactor * texture(materialParams_metallicRoughnessMap, getUV0()).g;
    material.metallic = materialParams.metallicFactor * texture(materialParams_metallicRoughnessMap, getUV0()).b;
    material.ambientOcclusion = texture(materialParams_aoMap, getUV0()).r;
    material.emissive = texture(materialParams_emissiveMap, getUV0());
    material.emissive.r *= materialParams.emissiveFactor[0];
    material.emissive.g *= materialParams.emissiveFactor[1];
    material.emissive.b *= materialParams.emissiveFactor[2];

}
}